{"extracted_information": "The provided web content details React Native's APIs for integrating with mobile assistive technologies like VoiceOver (iOS) and TalkBack (Android). It outlines various accessibility properties, states, values, and actions, along with platform-specific considerations and methods for testing.", "specifications": {"accessibility_properties": {"accessible": {"description": "When true, indicates view is discoverable by assistive technologies. Default for touchable elements. Translates to native 'focusable' (Android) and 'isAccessibilityElement' (iOS).", "type": "boolean", "platform_notes": {"android": "Translates to native `focusable`.", "ios": "Translates to native `isAccessibilityElement`."}}, "accessibilityLabel": {"description": "String verbalized by screen reader when element is selected. Good practice for accessible views.", "type": "string"}, "accessibilityLabelledBy": {"description": "Android-specific. References another element's `nativeID` for complex forms, announcing 'Input, Edit Box for Label for Input Field' when focusing TextInput.", "type": "string", "platform_notes": {"android": "Specific property."}}, "accessibilityHint": {"description": "Provides additional context on action result. Read after label.", "type": "string", "platform_notes": {"ios": "VoiceOver reads if hints enabled in device settings.", "android": "TalkBack reads, hints cannot be turned off."}}, "accessibilityLanguage": {"description": "iOS-specific. Screen reader uses specified language (BCP 47) for label, value, hint.", "type": "string (BCP 47)", "platform_notes": {"ios": "Specific property."}}, "accessibilityIgnoresInvertColors": {"description": "iOS-specific. If true, prevents view from inverting colors when accessibility setting is on (e.g., for photos).", "type": "boolean", "platform_notes": {"ios": "Specific property."}}, "accessibilityLiveRegion": {"description": "Android-specific. Controls if TalkBack announces dynamic changes. Options: 'none', 'polite', 'assertive'.", "type": "enum ('none', 'polite', 'assertive')", "platform_notes": {"android": "Specific property."}}, "accessibilityRole": {"description": "Communicates component purpose to assistive technology.", "type": "enum", "values": ["adjustable", "alert", "button", "checkbox", "combobox", "header", "image", "imagebutton", "keyboardkey", "link", "menu", "menubar", "menuitem", "none", "progressbar", "radio", "radiogroup", "scrollbar", "search", "spinbutton", "summary", "switch", "tab", "tablist", "text", "timer", "togglebutton", "toolbar", "grid"]}, "accessibilityShowsLargeContentViewer": {"description": "iOS 13.0+. Determines if large content viewer is shown on long press.", "type": "boolean", "platform_notes": {"ios": "Specific property, iOS 13.0+."}}, "accessibilityLargeContentTitle": {"description": "iOS-specific. Title for large content viewer (requires `accessibilityShowsLargeContentViewer: true`).", "type": "string", "platform_notes": {"ios": "Specific property."}}, "accessibilityState": {"description": "Describes current state of a component.", "type": "object", "fields": {"disabled": "boolean", "selected": "boolean", "checked": "boolean or 'mixed'", "busy": "boolean", "expanded": "boolean"}}, "accessibilityValue": {"description": "Represents current value of a component (textual or range-based).", "type": "object", "fields": {"min": "integer (required if 'now' set)", "max": "integer (required if 'now' set)", "now": "integer", "text": "string (overrides min, now, max)"}}, "accessibilityViewIsModal": {"description": "iOS-specific. If true, VoiceOver ignores elements in sibling views.", "type": "boolean", "platform_notes": {"ios": "Specific property."}}, "accessibilityElementsHidden": {"description": "iOS-specific. Hides accessibility elements within the element. Similar to Android's `importantForAccessibility=\"no-hide-descendants\"`.", "type": "boolean", "platform_notes": {"ios": "Specific property."}}, "aria-valuemax": {"description": "Maximum value for range-based components."}, "aria-valuemin": {"description": "Minimum value for range-based components."}, "aria-valuenow": {"description": "Current value for range-based components."}, "aria-valuetext": {"description": "Textual description of component value."}, "aria-busy": {"description": "Indicates element is being modified; assistive technologies may wait."}, "aria-checked": {"description": "State of checkable element (boolean or 'mixed'). Default: false."}, "aria-disabled": {"description": "Indicates element is perceivable but disabled."}, "aria-expanded": {"description": "Indicates whether expandable element is expanded or collapsed."}, "aria-hidden": {"description": "Hides accessibility elements within the element."}, "aria-label": {"description": "Defines string label for interactive element."}, "aria-labelledby": {"description": "Android-specific. Identifies element that labels the element it is applied to (matches `nativeID`).", "platform_notes": {"android": "Specific property."}}, "aria-live": {"description": "Android-specific. Describes types of updates for live regions. Options: 'off', 'polite', 'assertive'. Default: 'off'.", "type": "enum ('assertive', 'off', 'polite')", "platform_notes": {"android": "Specific property."}}, "aria-modal": {"description": "iOS-specific. Boolean value, VoiceOver ignores sibling views if true.", "type": "boolean", "platform_notes": {"ios": "Specific property."}}, "aria-selected": {"description": "Indicates if selectable element is currently selected."}, "importantForAccessibility": {"description": "Android-specific. Controls if view fires accessibility events/reported to services, resolving issues with overlapping UI components. Options: 'auto', 'yes', 'no', 'no-hide-descendants' (hides element and children).", "type": "enum ('auto', 'yes', 'no', 'no-hide-descendants')", "platform_notes": {"android": "Specific property."}}, "onAccessibilityEscape": {"description": "iOS-specific. Custom function for 'escape' gesture (two-finger Z-shape). Moves back hierarchically or dismisses modal.", "type": "function", "platform_notes": {"ios": "Specific property."}}, "onAccessibilityTap": {"description": "iOS-specific. Custom function when accessible element activated by double tapping.", "type": "function", "platform_notes": {"ios": "Specific property."}}, "onMagicTap": {"description": "iOS-specific. Custom function for 'magic tap' gesture (two-finger double-tap). Performs most relevant action.", "type": "function", "platform_notes": {"ios": "Specific property."}}, "role": {"description": "Communicates component purpose, takes precedence over `accessibilityRole`.", "type": "enum", "values": ["alert", "button", "checkbox", "combobox", "grid", "heading", "img", "link", "list", "listitem", "menu", "menubar", "menuitem", "none", "presentation", "progressbar", "radio", "radiogroup", "scrollbar", "searchbox", "slider", "spinbutton", "summary", "switch", "tab", "tablist", "timer", "toolbar"]}}}, "pricing": {}, "features": [{"name": "Accessibility Properties", "description": "A set of properties (`accessible`, `accessibilityLabel`, `accessibilityHint`, `accessibilityRole`, `accessibilityState`, `accessibilityValue`, etc.) to enhance discoverability, provide labels, hints, and communicate component states to assistive technologies."}, {"name": "ARIA Properties", "description": "Support for WAI-ARIA properties (`aria-valuemax`, `aria-label`, `aria-live`, etc.) to provide additional semantic meaning and control for assistive technologies."}, {"name": "Accessibility Actions", "description": "Allows components to define and handle actions programmatically invoked by assistive technology, including standard actions (`magicTap`, `escape`, `activate`, `increment`, `decrement`, `longpress`, `expand`, `collapse`) and custom actions."}, {"name": "Screen Reader Detection", "description": "The `AccessibilityInfo` API determines if a screen reader is currently active."}, {"name": "Sending Accessibility Events (Android)", "description": "Native UIManager module's `sendAccessibilityEvent` method triggers accessibility events (e.g., `typeWindowStateChanged`, `typeViewFocused`, `typeViewClicked`) on UI components."}], "statistics": {}, "temporal_info": {"not_applicable": "The content does not specify best practices or features for a future year like 2025; it describes current React Native accessibility APIs."}, "geographical_data": {}, "references": ["Android: `View#setFocusable(boolean)` (developer.android.com)", "iOS: `isAccessibilityElement` (developer.apple.com/documentation/uikit/uiaccessibilityelement/isaccessibilityelement)", "iOS: `accessibilityHint` guidelines (developer.apple.com/documentation/objectivec/nsobject/1615093-accessibilityhint)", "BCP 47 specification (rfc-editor.org/info/bcp47)", "React Native documentation for `nativeID` (`/docs/view#nativeid`)", "React Native `AccessibilityInfo` documentation (`/docs/accessibilityinfo`)", "React Native `accessibilityRole` documentation (`/docs/accessibility#accessibilityrole`)"]}