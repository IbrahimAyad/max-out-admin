{"extracted_information": "The web content provides detailed information on integrating TypeScript with React Navigation, focusing on type-checking mechanisms and best practices. It covers configuration, type generation for navigators, screens, and hooks, and organizing types for maintainability.", "specifications": {"typescript_configuration": {"tsconfig_compiler_options": {"strict": "true", "strictNullChecks": "true", "moduleResolution": "bundler"}}, "type_imports": ["@react-navigation/native: StaticScreenProps, StaticParamList, RootParamList, NavigatorScreenParams, CompositeScreenProps, CompositeNavigationProp, RouteProp, createNavigationContainerRef, useNavigationContainerRef, NavigationContainerRef", "@react-navigation/bottom-tabs: BottomTabNavigationProp, BottomTabScreenProps, BottomTabNavigationOptions, BottomTabOptionsArgs", "@react-navigation/native-stack: NativeStackNavigationProp, NativeStackScreenProps", "@react-navigation/stack: StackNavigationProp, StackScreenProps, StackNavigationOptions, StackOptionsArgs", "@react-navigation/drawer: DrawerNavigationProp, DrawerScreenProps, DrawerNavigationOptions, DrawerOptionsArgs"], "generic_parameters": {"NativeStackScreenProps": ["ParamList (object)", "Route Name (string)", "Navigator ID (optional)"]}}, "pricing": {}, "features": [{"name": "Type-checking Screens and Params", "description": "Specify the type of `route.params` using `StaticScreenProps` for static API. Define `ParamList` for root and nested navigators (e.g., `RootStackParamList`) mapping route names to param types. Use `undefined` for no params, union with `undefined` for optional params. Generic `createXNavigator` functions (`createStackNavigator<RootStackParamList>()`) are used to apply the `ParamList`."}, {"name": "Type-checking Navigation Props", "description": "Annotate `navigation` and `route` props using navigator-specific types like `NativeStackScreenProps`, `StackScreenProps`, `DrawerScreenProps`, `BottomTabScreenProps`. These types take the `ParamList`, route name, and optional navigator ID as generics. Alternatively, `NativeStackNavigationProp`, `RouteProp` can be used for individual `navigation` and `route` annotation respectively. Type-checking ensures `navigate`, `push`, `setParams`, `replaceParams` are type-safe."}, {"name": "Nesting Navigator Type-checking (Dynamic API)", "description": "For dynamically defined nested navigators, explicitly specify the param list for the nested navigator. Use `NavigatorScreenParams` utility to extract params from screens containing nested navigators (e.g., `Home: NavigatorScreenParams<HomeTabParamList>`)."}, {"name": "Combining Navigation Props in Nested Navigators", "description": "When nesting navigators, screen's `navigation` prop combines multiple navigation types (e.g., `jumpTo` from tabs, `push` from stack). `CompositeScreenProps` combines screen prop types, taking primary (owning navigator) and secondary (parent navigators) types. `CompositeNavigationProp` similarly combines navigation prop types."}, {"name": "Annotating Hooks and Refs", "description": "Annotate `useNavigation()` and `useRoute()` hooks with type parameters. Annotate `options` and `screenOptions` using types like `StackNavigationOptions` or `StackOptionsArgs` for function forms. Type-check `NavigationContainerRef` when using `createNavigationContainerRef()`, `useNavigationContainerRef()`, `React.useRef`, or `React.createRef` for `NavigationContainer` refs."}], "statistics": {}, "temporal_info": {}, "geographical_data": {}, "references": [{"type": "documentation", "title": "React Navigation documentation", "url": "/docs/params", "context": "Reference for route.params"}, {"type": "documentation", "title": "React Navigation documentation", "url": "/docs/use-navigation", "context": "Reference for useNavigation hook"}, {"type": "documentation", "title": "React Navigation documentation", "url": "/docs/native-stack-navigator", "context": "Reference for NativeStackNavigationProp"}, {"type": "documentation", "title": "React Navigation documentation", "url": "/docs/stack-navigator", "context": "Reference for StackNavigationProp"}, {"type": "documentation", "title": "React Navigation documentation", "url": "/docs/drawer-navigator", "context": "Reference for DrawerNavigationProp"}, {"type": "documentation", "title": "React Navigation documentation", "url": "/docs/route-object", "context": "Reference for route object"}, {"type": "documentation", "title": "React Navigation documentation", "url": "/docs/static-configuration", "context": "Reference for createXNavigator functions"}, {"type": "documentation", "title": "React Navigation documentation", "url": "/docs/navigator#id", "context": "Reference for navigator id prop"}, {"type": "documentation", "title": "React Navigation documentation", "url": "/docs/navigation-object#navigate", "context": "Reference for navigate action"}, {"type": "documentation", "title": "React Navigation documentation", "url": "/docs/stack-actions#push", "context": "Reference for push action"}, {"type": "documentation", "title": "React Navigation documentation", "url": "/docs/typescript/navigation-actions#setparams", "context": "Reference for setParams action"}, {"type": "documentation", "title": "React Navigation documentation", "url": "/docs/typescript/navigation-actions#replaceparams", "context": "Reference for replaceParams action"}, {"type": "documentation", "title": "React Navigation documentation", "url": "/docs/bottom-tab-navigator", "context": "Reference for BottomTabNavigationProp"}, {"type": "documentation", "title": "React Navigation documentation", "url": "/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator", "context": "Reference for navigating to a screen in nested navigator"}, {"type": "documentation", "title": "React Navigation documentation", "url": "/docs/tab-actions#jumpto", "context": "Reference for jumpTo action"}, {"type": "documentation", "title": "React Navigation documentation", "url": "/docs/use-route", "context": "Reference for useRoute hook"}, {"type": "documentation", "title": "React Navigation documentation", "url": "/docs/link", "context": "Reference for Link component"}, {"type": "documentation", "title": "React Navigation documentation", "url": "/docs/navigation-container#linking", "context": "Reference for linking prop on NavigationContainer"}], "best_practices": ["Set `strict: true` or `strictNullChecks: true` and `moduleResolution: 'bundler'` in `tsconfig.json` for correct IntelliSense and type inference.", "Use navigator-agnostic types for `useNavigation` where possible, and manually annotate for navigator-specific APIs (e.g., `push`, `openDrawer`).", "Create a separate file (e.g., `navigation/types.tsx`) to centralize all React Navigation related types.", "Define a global `RootParamList` interface (`declare global { namespace ReactNavigation { interface RootParamList extends RootStackParamList {} } }`) to provide default types for `useNavigation`, `Link`, `ref` across the app, ensuring type-safety and correct nesting for the `linking` prop.", "Create helper types (e.g., `HomeTabScreenProps`) to encapsulate complex `CompositeScreenProps` or `CompositeNavigationProp` definitions for reuse.", "For function forms of `options` and `screenOptions`, annotate arguments with types like `StackOptionsArgs` for type-checking.", "When specifying `ParamList`, `undefined` means no params, `SomeType | undefined` means optional params."], "deep_linking_configuration": {"type_checking": "Specifying a global `RootParamList` type for the root navigator (e.g., `declare global { namespace ReactNavigation { interface RootParamList extends RootStackParamList {} } }`) ensures correct type-checking for the `linking` prop on `NavigationContainer`."}, "navigation_state_management": {"type_checking_state_props": "The content primarily focuses on type-checking the structure of navigation state (`route.params`, `navigation` object properties) rather than explicit state management patterns beyond what React Navigation inherently provides. It ensures type safety when accessing `route.params` and when calling navigation actions like `setParams` or `replaceParams`."}}