{"raw_content": "{\n  \"data\": {\n    \"extracted_information\": \"The content provides comprehensive information on building offline-first React Native applications using Expo, WatermelonDB, and Supabase. It details the technical integration steps, including dependencies, data modeling, and the specific synchronization patterns employing Supabase RPC (Remote Procedure Calls) and Postgres functions for push and pull operations. The role of Supabase Realtime in triggering cross-device synchronization and the advantages and drawbacks of the offline-first approach are also discussed. While it mentions authentication via `auth.users`, specific authentication patterns are referenced externally.\",\n    \"specifications\": {\n      \"dependencies\": [\n        \"@nozbe/watermelondb\",\n        \"@supabase/supabase-js\",\n        \"expo-build-properties\"\n      ],\n      \"watermelon_db_setup\": {\n        \"native_dependencies\": \"WatermelonDB relies on `simdjson`, which requires native dependency setup. This is managed in React Native/Expo by configuring `expo-build-properties` to add `simdjson` to the iOS Podfile.\",\n        \"example_app_json_config\": {\n          \"expo\": {\n            \"plugins\": [\n              [\n                \"expo-build-properties\",\n                {\n                  \"ios\": {\n                    \"extraPods\": [\n                      {\n                        \"name\": \"simdjson\",\n                        \"configurations\": [\n                          \"Debug\",\n                          \"Release\"\n                        ],\n                        \"path\": \"../node_modules/@nozbe/simdjson\",\n                        \"modular_headers\": true\n                      }\n                    ]\n                  }\n                }\n              ]\n            ]\n          }\n        },\n        \"data_model_example\": {\n          \"description\": \"WatermelonDB requires defining models for local data. An example `Profile` model demonstrates properties (`name`, `website`) and associations (`stacks` via `has_many`).\",\n          \"code_excerpt\": \"import { Model, Q, Relation } from \\\"@nozbe/watermelondb\\\";\\nimport { date, readonly, text } from \\\"@nozbe/watermelondb/decorators\\\";\\n\\nimport { Stack } from \\\"./Stack\\\";\\n\\nexport class Profile extends Model {\\n  static table = \\\"profiles\\\";\\n\\n  @readonly @date(\\\"created_at\\\") createdAt!: Date;\\n  @readonly @date(\\\"updated_at\\\") updatedAt!: Date;\\n\\n  static associations = {\\n    [\\\"stacks\\\"]: {\\n      type: \\\"has_many\\\" as const,\\n      foreignKey: \\\"profile_id\\\",\\n    }\\n  };\\n\\n  @text(\\\"name\\\") name!: string;\\n  @text(\\\"website\\\") website!: string;\"\n        }\n      },\n      \"supabase_synchronization\": {\n        \"method\": \"Synchronization between WatermelonDB and Supabase backend is achieved through Remote Procedure Calls (RPC) to custom Postgres functions (`pull` and `push`).\",\n        \"sync_function_call_example\": {\n          \"code_excerpt\": \"import { SyncDatabaseChangeSet, synchronize } from '@nozbe/watermelondb/sync'\\n\\nawait synchronize({\\n  database,\\n  pullChanges: async ({ lastPulledAt, schemaVersion, migration }) => {\\n    const { data, error } = await supabase.rpc('pull', {\\n      last_pulled_at: lastPulledAt,\\n    })\\n\\n    const { changes, timestamp } = data as {\\n      changes: SyncDatabaseChangeSet\\n      timestamp: number\\n    }\\n\\n    return { changes, timestamp }\\n  },\\n  pushChanges: async ({ changes, lastPulledAt }) => {\\n    const { error } = await supabase.rpc('push', { changes })\\n  },\\n  sendCreatedAsUpdated: true,\\n})\"\n        },\n        \"postgres_push_function_example\": {\n          \"name\": \"push(changes jsonb)\",\n          \"description\": \"A PL/pgSQL function that receives `changes` (a JSONB object containing `created`, `deleted`, `updated` records) and applies them to the database. The example shows handling `profiles`.\",\n          \"code_excerpt\": \"create or replace function push(changes jsonb) returns void as $$\\ndeclare new_profile jsonb;\\ndeclare updated_profile jsonb;\\nbegin\\n  -- create profiles\\n  for new_profile in\\n    select jsonb_array_elements((changes->'profiles'->'created')) loop perform create_profile(\\n      (new_profile->>'id')::uuid,\\n      (new_profile->>'user_id')::uuid,\\n      (new_profile->>'name'),\\n      (new_profile->>'website'),\\n      epoch_to_timestamp(new_profile->>'created_at'),\\n      epoch_to_timestamp(new_profile->>'updated_at')\\n    );\\n  end loop;\\n  -- delete profiles\\n  with changes_data as (\\n    select jsonb_array_elements_text(changes->'profiles'->'deleted')::uuid as deleted\\n  )\\n  -- update profiles\\n  update profiles\\n  set deleted_at = now(),\\n    last_modified_at = now()\\n  from changes_data\\n  where profiles.id = changes_data.deleted;\\nend;\\n$$ language plpgsql;\"\n        },\n        \"postgres_pull_function_example\": {\n          \"name\": \"pull(last_pulled_at bigint default 0)\",\n          \"description\": \"A PL/pgSQL function that takes the `last_pulled_at` timestamp and returns a JSONB object containing all data changes (`updated` and `deleted` records) accumulated since that time, specific to `profiles` in the example.\",\n          \"code_excerpt\": \"create or replace function pull(last_pulled_at bigint default 0) returns jsonb as $$\\ndeclare _ts timestamp with time zone;\\ndeclare _profiles jsonb;\\nbegin\\n  -- timestamp\\n  _ts := to_timestamp(last_pulled_at / 1000);\\n  --- profiles\\n  select jsonb_build_object(\\n    'created',\\n    '[]'::jsonb,\\n    'updated',\\n    coalesce(\\n      jsonb_agg(\\n        jsonb_build_object(\\n          'id',\\n          t.id,\\n          'name',\\n          t.name,\\n          'website',\\n          t.website,\\n          'created_at',\\n          timestamp_to_epoch(t.created_at),\\n          'updated_at',\\n          timestamp_to_epoch(t.updated_at)\\n        )\\n      ) filter (\\n        where t.deleted_at is null\\n        and t.last_modified_at > _ts\\n      ),\\n      '[]'::jsonb\\n    ),\\n    'deleted',\\n    coalesce(\\n      jsonb_agg(to_jsonb(t.id)) filter (\\n        where t.deleted_at is not null\\n        and t.last_modified_at > _ts\\n      ),\\n      '[]'::jsonb\\n    )\\n  ) into _profiles\\n  from sync_profiles_view t;\\n  return jsonb_build_object(\\n    'changes',\\n    jsonb_build_object(\\n      'profiles',\\n      _profiles\\n    ),\\n    'timestamp',\\n    timestamp_to_epoch(now())\\n  );\\nend;\\n$$ language plpgsql;\"\n        },\n        \"timestamp_utility_functions\": [\n          {\n            \"name\": \"epoch_to_timestamp(epoch text)\",\n            \"description\": \"Converts epoch (bigint from WatermelonDB) to Postgres `timestamp with time zone`.\",\n            \"code_excerpt\": \"create or replace function epoch_to_timestamp(epoch text) returns timestamp with time zone as $$ begin return timestamp with time zone 'epoch' + ((epoch::bigint) / 1000) * interval '1 second';\\nend;\\n$$ language plpgsql;\"\n          },\n          {\n            \"name\": \"timestamp_to_epoch(ts timestamp with time zone)\",\n            \"description\": \"Converts Postgres `timestamp with time zone` to epoch (bigint for WatermelonDB).\",\n            \"code_excerpt\": \"create or replace function timestamp_to_epoch(ts timestamp with time zone) returns bigint as $$ begin return (\\n  extract(\\n    epoch\\n    from ts\\n  ) * 1000\\n)::bigint; end; $$ language plpgsql;\"\n          }\n        ]\n      }\n    },\n    \"features\": [\n      {\n        \"name\": \"Offline-first Strategy\",\n        \"description\": \"An architectural approach where the app functions primarily offline, synchronizing data only when connectivity is available.\",\n        \"advantages\": [\n          \"App is fully usable even without an internet connection.\",\n          \"Provides an instantaneous user experience for data reads and updates, as operations occur locally first.\",\n          \"Enhances overall app reliability and performance by reducing dependency on network latency.\"\n        ],\n        \"drawbacks\": [\n          \"Data can become stale if not synced regularly.\",\n          \"Potential for data conflicts if the same data is modified independently in multiple places while offline.\"\n        ],\n        \"solution_provider\": {\n          \"name\": \"WatermelonDB\",\n          \"details\": \"Acts as the local, offline-first data store. Built on SQLite, it includes a robust sync engine and handles conflicts using a 'latest change of a record wins' strategy.\"\n        }\n      },\n      {\n        \"name\": \"Supabase Real-time Data Patterns\",\n        \"description\": \"Supabase Realtime is used as a mechanism to signal and trigger data synchronization across different devices. When changes occur in the Supabase backend, Realtime can notify connected clients to initiate a sync, ensuring data consistency.\",\n        \"implementation_note\": \"The article states Realtime is used to 'trigger sync on other devices,' but doesn't provide specific Realtime API code within the sync logic.\"\n      },\n      {\n        \"name\": \"Supabase Authentication Integration\",\n        \"description\": \"The demonstrated data model for the offline-first app (`Share My Stack`) references user data stored within Supabase's `auth.users` table, indicating a connection to Supabase's built-in authentication system.\",\n        \"patterns_detail\": \"While the integration point is mentioned, the article does not elaborate on specific authentication patterns (e.g., email/password, OAuth, JWT handling) or their implementation details within the React Native app. It refers to other Supabase resources for comprehensive authentication guidance.\"\n      },\n      {\n        \"name\": \"Best Practices / Considerations\",\n        \"description\": \"The article highlights important trade-offs and scenarios for which this offline-first approach is most suitable.\",\n        \"points\": [\n          \"**Increased Development Friction for Data Model Changes**: Implementing this pattern requires managing schema definitions in three places: Supabase (Postgres), WatermelonDB (local models), and the custom Postgres sync functions (`push`, `pull`). Changes to the data model necessitate updates in all three areas, adding complexity compared to a purely online approach.\",\n          \"**Ideal Use Case**: This strategy is highly viable and recommended for applications where the data model is relatively stable (not expected to change frequently) and where delivering a highly performant, instantaneous user experience (even offline) is a critical requirement for adoption.\"\n        ]\n      }\n    },\n    \"temporal_info\": {\n      \"publication_date\": \"08 Oct 2023\"\n    },\n    \"references\": [\n      {\n        \"name\": \"Supabase JavaScript Client documentation\",\n        \"url\": \"https://supabase.com/docs/reference/javascript/introduction\"\n      },\n      {\n        \"name\": \"WatermelonDB official documentation\",\n        \"url\": \"https://watermelondb.dev/docs/\"\n      },\n      {\n        \"name\": \"Supabase Postgres Functions guides\",\n        \"url\": \"https://supabase.com/docs/guides/database/functions\"\n      },\n      {\n        \"name\": \"Share My Stack App Store link\",\n        \"url\": \"https://apps.apple.com/us/app/share-my-stack/id6450111644\"\n      },\n      {\n        \"name\": \"Share My Stack GitHub repository\",\n        \"url\": \"https://github.com/bndkt/sharemystack/\"\n      },\n      {\n        \"name\": \"Getting started with React Native authentication (Supabase blog)\",\n        \"url\": \"https://supabase.com/blog/react-native-authentication\"\n      },\n      {\n        \"name\": \"React Native file upload with Supabase Storage (Supabase blog)\",\n        \"url\": \"https://supabase.com/blog/react-native-storage\"\n      },\n      {\n        \"name\": \"React Native Quickstart (Supabase docs)\",\n        \"url\": \"https://supabase.com/docs/guides/auth/quickstarts/react-native\"\n      },\n      {\n        \"name\": \"React Native video tutorials (Supabase YouTube playlist)\",\n        \"url\": \"https://youtube.com/playlist?list=PL5S4mPUpp4OsrbRTx21k34aACOgpqQGlx&si=Ez-0S4QhBxtayYsq\"\n      }\n    ]\n  }\n}"}