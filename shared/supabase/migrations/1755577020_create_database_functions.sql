-- Migration: create_database_functions
-- Created at: 1755577020

-- Create function to update stock status automatically\nCREATE OR REPLACE FUNCTION update_variant_stock_status()\nRETURNS TRIGGER AS $$\nBEGIN\n  -- Update stock status based on available quantity and threshold\n  IF NEW.available_quantity <= 0 THEN\n    NEW.stock_status = 'out_of_stock';\n  ELSIF NEW.available_quantity <= NEW.low_stock_threshold THEN\n    NEW.stock_status = 'low_stock';\n  ELSE\n    NEW.stock_status = 'in_stock';\n  END IF;\n  \n  -- Update timestamp\n  NEW.updated_at = NOW();\n  NEW.last_inventory_update = NOW();\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Create trigger for automatic stock status updates\nDROP TRIGGER IF EXISTS trigger_update_variant_stock_status ON enhanced_product_variants;\nCREATE TRIGGER trigger_update_variant_stock_status\n  BEFORE UPDATE OF available_quantity, inventory_quantity ON enhanced_product_variants\n  FOR EACH ROW\n  EXECUTE FUNCTION update_variant_stock_status();\n\n-- Create function to log inventory changes\nCREATE OR REPLACE FUNCTION log_inventory_change()\nRETURNS TRIGGER AS $$\nBEGIN\n  -- Only log if inventory quantities actually changed\n  IF OLD.available_quantity != NEW.available_quantity OR OLD.inventory_quantity != NEW.inventory_quantity THEN\n    INSERT INTO inventory_history (\n      variant_id,\n      change_type,\n      quantity_change,\n      previous_quantity,\n      new_quantity,\n      reason\n    ) VALUES (\n      NEW.id,\n      'adjustment',\n      NEW.available_quantity - OLD.available_quantity,\n      OLD.available_quantity,\n      NEW.available_quantity,\n      'Inventory update via admin'\n    );\n    \n    -- Check for low stock alert\n    IF NEW.available_quantity <= NEW.low_stock_threshold AND OLD.available_quantity > NEW.low_stock_threshold THEN\n      INSERT INTO low_stock_alerts (variant_id, alert_threshold, current_quantity)\n      VALUES (NEW.id, NEW.low_stock_threshold, NEW.available_quantity)\n      ON CONFLICT (variant_id) DO UPDATE SET\n        current_quantity = NEW.available_quantity,\n        alert_status = 'active',\n        updated_at = NOW();\n    END IF;\n  END IF;\n  \n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Create trigger for inventory change logging\nDROP TRIGGER IF EXISTS trigger_log_inventory_change ON enhanced_product_variants;\nCREATE TRIGGER trigger_log_inventory_change\n  AFTER UPDATE ON enhanced_product_variants\n  FOR EACH ROW\n  EXECUTE FUNCTION log_inventory_change();;